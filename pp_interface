
Draft version 5
 
Beta.

Please don't re-number item in this file as code comment refer this number.
 
General FIXME: call graphs - for a later spec ?


1. Basic principles
-------------------

There are five basic things a user needs to specify to the post-profile tools :

a) common options such as --help, --version
b) specifications of which sample files to operate upon
c) processing options (what gets included in the workings) 
d) output and formatting options (what gets output, and how)
e) "special" options 

Of these, obviously a), and hopefully b) and some of c) can be universally
shared between the interfaces.

2. Common basic options
-----------------------

2.1 --help (-?)

	As generated by popt.

2.2 --usage

	As generated by popt.

2.3 --version (-v) 

	As currently, "opreport: oprofile 0.3cvs compiled on May 15 2002 16:43:40"

2.4 --verbose (-V)

	Maybe we can have more fine-grained --debug later, but for now this will do

2.5 --no-demangle (n/a)

	We demangle by default. This is for avoiding demangler bugs and the like.

2.6 --demangle (n/a)

	For symmetry only 

2.7 --smart-demangle (-D)

	Use the smart demangler. Not the default.

3. Profile specifications
-------------------------

Each tool needs at least one sample file + associated binary image to operate on,
and some tools (opdiff, opreport) can have more than one. It would
be very useful for the user to be able to conveniently specify a subset of profiles,
and we can use the same method for every tool.

3.1 Each profile is a tuple of :

3.3) the actual samples file to use 
3.4) the actual binary to bfd_open
3.5/3.6) Session name
3.7) Binary
3.9) App binary (for shared libraries, e.g. /bin/ls using /lib/libc.so)
3.11) Event name
3.12) Event count
3.13) unit mask
3.14) CPU nr.
3.15) Task Group ID (tgid)
3.16) Task ID (tid)

FIXME: review the can be null parameters
3.2 Some of these may be "null" parameters, namely 3.3), 3.4), 3.9), 3.13),
3.14), 3.16), (and possibly 3.12) depending on what we do about
multiplexing).

3.4) is a special case since it is not part of the profile as such. By default
it is derived from 3.7), but allowing its specification is needed for opdiff
of two differently compiled binary + profile pairs. Similar goes for 3.4)

So if we provide a way to specify some set of profiles via the command line,
we need to support each of these. My first idea is something like this :

opreport session:run1 image:/usr/bin/oprofiled

It's allowed to specify more than one time a tag and its value, all subsequent
tag:value will overwrite the previous one. This scheme is simpler to code and
can be usefull when used with alias. See section 4.

FIXME: it's unclear if tag which allow list of item wouldn't be cumulative
rather overwritting. Pro for cumulative is least suprise principle, if we allow
list it's less suprising to cumulate, cons is overwrite seems more useful when
used in conjunction with alias.

Here's a complete list of tags :

3.3	sample-file: <filename>
		An actual sample file. If this is given, no other tags are allowed,
		with the exception of binary:
 
3.4	binary: <filename>
		The binary to use. May only be used with sample-file: If binary
		is given filename to bfd_open is not derived from sample-file:,
		the sample-file:bin_name or lib_name is just ignored if binary:
		is given.

3.5	session: <sessionlist>
		A comma-separated list of session names to resolve in. Absence of this
		tag, unlike all others, means "the current session", equivalent to
		specifying "session: current"

3.6	session-exclude: <sessionlist>
		A comma list of sessions to exclude ...
	 
3.7	image: <imagelist>
		Comma list of image names to resolve. Each entry may be relative
		path, or wordexp() style name, or full path, e.g.
	
		'image:/usr/bin/oprofiled,*op*,./oprofpp'

		"image:" is default tag, allowing old-style "opreport /usr/bin/oprofiled"
		The above shortcut don't work if user try to profile a binary
		with a ':' imbedded in filename or path name, in this case
		complete syntax image:image_name must be used. FIXME: must
		we assume than invalid_tag_name:value is a binary name. Cons
		is code simplification (and better error message ?) Pro is
		easier to use for guys using ':' in filename (and smallest
		documentation ?)

3.8	image-exclude: <imagelist> 
		Comma list of images to exclude from the final list

3.9	lib-image: <imagelist>
		Comma list of library images to consider. Thus when looking for glibc samples
		due to oprofiled, opreport /usr/bin/oprofiled 'lib-image:*libc*' will show only
		those. If not specified, these samples are NOT included by default, EXCEPT
		in the presence of automerging if image:*libc*, for example.

3.10	lib-image-exclude: <imagelist>
		Similar to image-exclude ...
 
3.11	event: event
		Specify a particular event type e.g. CPU_CLK_UNHALTED or the string all to specify any event

3.12	count: count
		Specify the count for that event e.g. 30000 or the string all to specify any count

3.13	unit-mask: mask
		Specify the unit mask for that event. Encoded as numerical value or the string all to specify any unit mask.

3.14	cpu: <cpulist>
		Comma-separated list of cpu numbers to consider

3.15	pid: <pidlist>
		Comma list of pid's to consider. This defines a thread group
		including all child threads (task->tgid)

FIXME: tgid should also be accepted for this ?

3.16	tid: <tidlist>
		A specific thread (task->tid)

3.17 If a tag is not specified, then it will match all values (with the exception of
     session: as noted).
 
Note: we can use a common method for comma-separated lists :

list ::= listitem ',' list | listitem
listitem ::= listchar listchar*
listchar ::= '\,' | '*' | '?' | alphanum 

i.e. we allow escape for entries with commas in it, and we allow
globbing.
 
We can use cpu,tgid,tid,event,count,unit-mask formats as parameters
to the daemon too. But we must allow multiple event,count pairs
so the syntax must be different.

Sample file mangling
--------------------

We need to encode a number of the above things in the filename.

3.19 The proposed format is

$SAMPLES_DIR/session/{root}/path/to/binary/event.count.unitmask.tgid.tid.cpu
$SAMPLES_DIR/session/{root}/path/to/binary/{dep}/{root}/path/to/lib/event.count.unitmask.tgid.tid.cpu

The latter is to be used when using --separate=lib|kernel

(in decimal where relevant) 
For example,

$SAMPLES_DIR/current/{root}/bin/ls/{dep}/{root}/lib/libc.so/CPU_CLK_UNHALTED.30000.0.434.434.0

3.20 The paths must be fully resolved of symbolic links.

3.21 The parts tgid,tid,cpu may, instead of a number, have the
value "all", for when profiling method is not splitting

3.22 The current session is defined as "current", all other sessions are free-form

3.23 As well as "{root}" dir (representing the / fs), there is a "{kern}" dir,
which will contain the 2.5 modules and the vmlinux file when profiling
with --no-vmlinux,  e.g :

$SAMPLES_DIR/current/{kern}/oprofile/CPU_CLK_UNHALTED.30000.0.434.434.0
$SAMPLES_DIR/current/{root}/bin/ls/{dep}/{kern}/oprofile/CPU_CLK_UNHALTED.30000.0.434.434.0

  {kern} can be followed only by a single path component. The name following
a {kern} are first searched as it and, if not found, a second search is done
with a ".ko" suffix. FIXME: must we special case vmlinux and always add a .ko
to other filename

3.24 The encoding scheme used should simplify code since we parse the string
  at a syntactic point of view i.e. we don't have to look for existing path
  or file. Some redundancy exist, like {dep} which is not striclty required,
  but allow to sanity check samples filename.

3.25 To clarify things here are the four allowed form of samples filename

{root}/path/to/bin/CPU_CLK_UNHALTED.100000.255.33.34.0
{kern}/name/CPU_CLK_UNHALTED.100000.255.33.34.0
{root}/path/to/bin/{dep}/{root}/path/to/lib/CPU_CLK_UNHALTED.100000.255.33.34.0
{root}/path/to/bin/{dep}/{kern}/name/CPU_CLK_UNHALTED.100000.255.33.34.0

Resolution algorithm
--------------------

session=as given or default to "current"
all others set to "*" (match on anything) by default

3.24 for each (file in session(s)) {
	next if samplefile && samplefile!=file;
	next if image && !included(file.image, imagelist)
	next if image-exclude && included(file.image, image-exclude)
	next if lib-image && !included(file.lib-image, lib-imagelist)
	next if lib-image-exclude && included(file.lib-image, lib-image-exclude)
	next if event && file.event != event
	next if count && file.count != count
	next if unitmask && file.unit_mask != unitmask
	next if cpu && !included(file.cpu, cpulist)
	next if tgid && !included(file.tgid, tgidlist)
	next if tid && !included(file.tid, tidlist)
 
	add_to_profile_list();
}

3.34 if (one_profile_allowed_only) { 
	// merge on tgid,tid,cpu
	// and also lib-image, iff the lib-image
	// is specified as imagename
	merge
	if (nr. profiles > 1)
		error
}

4. op_alias
-----------

The above is rather tedious syntax, and is likely to stay that way
even with improvements. So we can have a command line tool / config file, e.g. :

4.1 # cat .oprofile/aliases
run1-oprofiled session:run1 image:/usr/bin/oprofiled

4.2 # opreport run1-oprofiled
 
for convenience. This is essentially a stored query facility ...

4.3 Since tag:value on command line overwrite previously seen tag:value it's
allowed to store in .oprofile/op_alias a complete set of tag and to overwrite
some of them on command line.

$ cat .oprofile/aliases
all-lib libname:* tid:all tgid:all etc.
$ opreport alias:all-lib tgid:137

4.4 alias_name act as if the aliases line from .oprofile/aliases is inserted
at the place of alias_name on command line.

Note there is a potential ambiguity with:

$ opreport -l name

if name is a binary in the current directory and is a valid alias name, in such
case name being an alias name is assumed.

4.5 When an alias is used user must be notified probably by showing the new
command line after substitution of the alias name

 
5. opreport
------------

née oprofpp.

This tool is used for providing symbol-based summaries of a particular set
of image (possibly including all image profiled). The profile spec don't need
to resolve to exactly one profile. After selecting candidate sample filename
from the profile specification merge specification are applied. If this
resulting contains sample to binary which belong to another binary (shared lib,
 module) the output specification e is added to default

5.1 opreport <flags> <profile-spec>
	--symbols (-l)
	--debug-info (-b)
	--details (-a)
	--output <output spec> (-o) 
	--threshold <threshold> (-t)
	--include-dependent (-n)
	--sort <sort spec> (-s)
	--ignore-symbols <symbollist> (-i)
	--exclude-symbols <symbollist> (-e)
	--image-path (-p)
	--merge <merge spec>
	<profile spec>

5.2 --include-dependent

	Include libs, kernel, modules, etc.

5.3 --symbols <symbol-list>

	This is the standard sorted summary produced by oprofpp, as specified
by -i, -e, -s, -o.

	5.3.1 The default for opreport will be "opreport --symbols \*"

	5.3.2 This must include --dependent symbols  when --include-dependent is set
 
5.4 --output <outputspec>

    What fields to output in what order, as follows :

	v       vma offset
	s       nr samples
	S       nr accumulated samples
	p       nr percent samples
	P       nr accumulated percent samples
	q       nr percent samples details
	Q       nr cumulated percent samples details
	n       symbol name
	l       source file name and line nr
	L       base name of source file and line nr
	i       image name (these two are useful for merged)
	I       base name of image name
	e	owning application
	E	base of owning application
 
	x	reserved for XML output at some point
 

v,s,S,p,P,n,m,I,L,i,I :
 
0x8004434 433 34343 0.3% 4.5% blah(int) blah_Qv /home/steve.c:3 steve.c:3 /home/steve steve 
 
5.7 'x' is reserved for now, and will be specified later.

5.8 The default format is vspn. The following options modify this :

5.9	--debug-info

	Shows line number and file information (equivalent to 'vspnL')

5.10	--details

	Shows per-address samples values not only per-symbol samples,
	equivalent to 'vspnL' but the "symbol" fields may show
	xmalloc+0x34, for example and some field can be omitted like
	i, I, n from details lines but not from the symbol lines. This option
	imply --symbols

5.11	--include-dependent

	Default format becomes 'vspni'

5.12 Specification of either --debug-info OR --details AND --output is a fatal error.

5.13 Note: --help must output this information and document the default
 
5.14 --sort <sortspec>

	What field to sort by, as follows :
 
	v       vma offset
	s       nr samples
	n       symbol name
	l       source file name and line nr
	L       base name of source file and line nr
	i       image name (these two are useful for merged)
	I       base name of image name
	e	owning application
	E	base of owning application
 
	r	sort whatever in reverse

FIXME: separate option --reverse-sort ?
FIXME: Some sorting option make little sense, I have not a great feeling to
add a dozen of comparator and map type to sort the sample container.
  
5.15 --ignore-symbols <symbollist>

	comma-separated list of symbols to ignore. Ignored symbols are included
	in percentage calculations etc, but not output

5.16 --exclude-symbols <symbollist>

	comma-separated list of symbols to exclude. Excluded symbols are neither
	included in calculations nor output

5.17 We accept mangled or unmangled names, but not a mix of the two. First the search
     tries to find verbatim symbol names. If exactly 0 matches are found, then every
     the search is repeated, but each match is done against a demangled symbol name. Thus
     mixing mangled with unmangled names will not work, and should be documented.
 
5.18 --threshold <threshold>

	Threshold of minimum values before an entry is printed. Either a sample count
	or a percentage, e.g. "1", "0.1%"
 
5.19 --image-path pathcommalist

	Extra path to search for missing binaries. This is used for finding 2.5 modules
	"oprofile", and 2.4 initrd modules (e.g. /lib/module.o). Resolution is: if a name
	can be found by appending the path of the unfound binary directly, that is used
	(in the list order). Otherwise, the basename is searched for. Otherwise, the basename
	with ".o" appended is searched for.

5.20 FIXME: should be we consider an "all-kernel" (kernel + modules) profile ?
FIXME: what the above means ?

5.21 --merge <merge spec>

Unlike the single-profile tools, it can be useful for us to not auto-merge
profile specs giving more than one profile result. Two profiles of the same
thing on CPU #0, and CPU #1, we might want to keep separate in the summary.  So
we don't do it by default for opsummary, but allow the user to specify merges
as follows :

	cpu

		Merge all cpu-specific profiles.

	pid

		Merge all process-id specific profiles (this merges all,
		regardless of tgid vs. tid).

FIXME: allow tgid and tid ?

	lib

		Merge all app-specific library profiles.
 
	unitmask

		Merge all compatible unit mask differences


6. opgprof
-----------

Split off the gprof dumping part of old oprofpp, since it didn't really
fit.

6.1 opgprof
	--gprof-file (-o) <file>
	<profile spec>

6.2 Default to gmon.out, making a back up if it exists already 
 
7. opannotate
--------------
 
née op_to_source. Our basic source / asm annotation tool.

7.1 opannotate
	--source-dir <dir> (-d)
	--output-dir <dir> (-o)
	--base-dir <dir> (-b)
	--include <filelist> (-i)
	--exclude <filelist> (-e)
	--threshold <threshold> (-t)
	--source (-s)
	--assembly (-a)
	--mixed (-m)
	--objdump-params (-p)
	<profile spec>

7.2 Profile spec must produce exactly 1 profile after auto-merge etc.
	
	FIXME: Will says :

	> What about packages with several executables in the sources? For example
	> gcc has gcc driver program and cc1.

	Now, we can't just allow multiple  profiles because one header file
	can over-write an existing one. So I think we should force multiple op
	annotate invocations to be made.

7.3 --source

	specifies the source-based per-file annotation. --source-dir is
	used to find the source when debug info is relative. When --base-dir
	is specified, then only files in that dir or a subdirectory are generated.
	In the absence of --base-dir, this defaults to the value of --source-dir
	The directory structure of the source is replicated under --output-dir,
	with annotated files of the same name as the source file.
	Specifying a --source-dir == --output-dir is an error. Samples
	in files outside of --source-dir are ignored with a message.

7.4 The source annotation works by prefixing all lines with a certain size comment, e.g.

 99 (3.2%)   :char some_function(void)
             :{ /* some_function total: 366220 19.22% */
             :       int i;
             :
 73 (2.3%)   :       for (i = 0; i < 4; i++) {
...

This is to keep the line numbers the same.

7.5. A post fix comment is also added at the end of the file, along the lines of :

/* Generated from /path/to/some_function.c
 * CPU_CLK_UNHALTED (cycles CPU is not halted) with a count of 30000 
 * blah blah
 */
 
7.6 --assembly

	specifies the objdump annotated asm output.  The output looks
	as above.

7.7 --mixed

	specified the src/asm objdump annotated output
 
7.8 --objdump-params

	Additional (?) params to objdump, e.g. for Intel syntax asm


9. opdiff
----------

opdiff is a tool for comparing exactly two profile-executable
pairs, on a symbol by symbol level.

Comparing global summaries is left for a future
specification (and tool) :)
 
Of the general form :

9.1 opdiff
	--ignore-symbols <symbollist> (-i)
	--exclude-symbols <symbollist> (-e)
	--output <outputspec> (-o)
	--sort <sortspec> (-s)
	--threshold <threshold> (-t)
	<profile spec 1> : <profile spec 2>

where 1 is to be diffed against 2. If each is more > 1 profile,
auto-merging should take place as before, if needed. We also
can use binary: in the profile spec.

9.2 We auto-merge as with opreport, the lhs,rhs or the ":"
must each specify exactly one profile
 
9.3 Two profile specs are incompatible iff

1. event differs or
2. count differs

9.4 NOTE: we consider all unit masks to be compatible, it is up
to the user to do this sensibly.
 
9.5 --threshold

	Slightly different. By default the threshold is applied
	absolutely, so --threshold 1 does not hide symbols with -232
	samples. Prefixing a - or + affects this behaviour, so
	--threshold +0 hides all negative entries, and --threshold -0
	hides all positive ones.

9.6 --output <outputspec>

    What fields to output in what order, as follows :

	v       vma offset
	s       nr samples (difference)
	p       nr percent samples (difference)
	n       symbol name
	m	mangled symbol name
	l       source file name and line nr
	L       base name of source file and line nr
	i       image name (these two are useful for merged)
	I       base name of image name
 
	x	reserved for XML output at some point

e.g. s is

343 (+343)

p is

0.2% (+0.1)
 
9.7 --sort <sortspec>

	What field to sort by, as follows :
 
	v       vma offset
	s	nr samples difference
	n       symbol name
	m	mangled symbol name
	l       source file name and line nr
	L       base name of source file and line nr
	i       image name (these two are useful for merged)
	I       base name of image name
 
	r	sort whatever in reverse

To get the symbols that have lost most samples at the top, 
for example, is "--sort sr"
 
10. auto merging
---------------

If a profile spec leaves e.g

	/usr/bin/oprofiled .... cpu #0
	/usr/bin/oprofiled .... cpu #1

or some other "mergable" set of profiles, and exactly 1 is required,
then we should automatically merge them into one profile for the purposes
required, along with a note to the user of what we've done.

10.1 Two profile specs are unmergable iff 

1. event differs or
2. count differs or
3. image or lib-image differs

10.2 Also consider :

	/lib/libc.so
		/usr/bin/oprofiled
		/bin/ls
		/usr/bin/apache

We should expect something like :

# opreport /lib/libc.so
opreport: Merging the following profiles into this report :
	/lib/libc.so (/usr/bin/oprofiled)
	/lib/libc.so (/bin/ls)
	/lib/libc.so (/usr/bin/apache)
....

So the message would ideally indicate exactly the differing parts
that got merged. (it is a matter of documentation + user education
to tell them that if they want just the apache profile for libc,
they do opreport /usr/bin/apache lib-image:/lib/libc.so )

Sometimes we might not want to them to merge though, e.g. opsummary to
show the differing process IDs separately for a number of images. So that's
why we have --merge where appropriate.
