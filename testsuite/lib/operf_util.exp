# operf_util.exp
#   Copyright (C) 2012-2019 IBM
#
# This file is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#

# globals which might change, perhaps?
set op_proc_prefix "/dev/oprofile"
set op_var_prefix "/var/lib/oprofile"

proc operf_get_proc_name {string} {
    # ophelp returns the processor name as a series of space separated
    # names.  Read string and replace spaces with underscores to match
    # the format expected in the operf_cpu_type{} switch statement
    set res ""
    set len [llength $string]
    set i 0

    foreach field $string {
        set res $res$field
        incr i

        if {$i != $len} {
            set res $res\_
        }
    }
    return $res
}

# detect CPU type
proc operf_cpu_type {} {
    global op_proc_prefix

    set ophelp_result [ local_exec "ophelp -r" "" "" 100 ]
    set cpu_name [operf_get_proc_name [ lindex $ophelp_result 1 ]]
    
    set cpu_events [select_cpu_events $cpu_name]

# Note, operf does not support the timer modes

    switch -exact "$cpu_name" {
        4 {set cpu_events bogus}
        timer {set cpu_events bogus}
        5 {set cpu_events bogus}
        rtc {set cpu_events bogus}
    }

    return $cpu_events
}

proc operf_delete_samples {} {
    set result [local_exec "rm -rf ./oprofile_data" "" "" 100 ]
    if { [lindex $result 0] == 0 } {
        verbose "Successfully deleted existing oprofile_data directory"
    } else {
        verbose "Failed to delete existing oprofile_data directory"
    }
}

proc operf_check_samples_exist {ctrs} {
    set test "nonzero-sized sample file creation"

    verbose "checking for nonzero sample files"

    foreach ctr $ctrs {
        set n [lindex $ctr 0]
        set event [lindex $ctr 1]

        verbose "running opreport --symbols --long-filenames event:$event"
        set result [ local_exec "opreport --symbols --long-filenames event:$event" "" "" 100 ]
        if { [regexp "error:" "$result" ]} {
            fail "$test: {$event} created nonzero sample files"
        } else {
            pass "$test: {$event} created nonzero sample files"
        }
    }
}

proc operf_check_java_samples_exist {ctrs} {
    set test "checking for samples associated with *.jo"
    verbose "checking for samples associated with *.jo"

    foreach ctr $ctrs {
        set n [lindex $ctr 0]
        set event [lindex $ctr 1]
        # add "-t 3" as a percentage threshold to cull some noise.
        # add "-n" to suppress the opreport header (easier for debug).
        # add a regexp blurb to get just the .jo entries.
        set result [ local_exec "opreport  event:$event -t 3 -n " "" "" 100 ]
        if { [regexp "\[0-9\].jo" "$result" ]} {
            pass "$test: {$event} found samples associated with *.jo"
        } else {
            fail "$test: {$event} didn't find samples associated with *.jo"
        }
    }
}

proc operf_check_java_object_file_exists {} {
    set test "At least one java object (.jo) file exists."
    verbose "At least one java object (.jo) file exists."

    set result [ local_exec "find . -name \"*.jo\" "  "" "" 100 ]
    if {[regexp ".jo" "$result"]} {
            pass "$test: found at least one java object file."
    } else {
            fail "$test: Did not find a java object (*.jo) file."
    }
}

proc operf_ocount_get_version {tool} {
    global operf_ocount_version
    global user_is_root

    if { [string compare $tool "operf"] == 0 } {
        set test "OProfile operf version check"
    } elseif { [string compare $tool "ocount"] == 0 } {
        set test "OProfile ocount version check"
    } else {
        set test "operf_ocount_get_version tool unknown"
    }

    verbose $test
    set result [ local_exec "$tool -v" "" "" 100 ]

    if {[regexp "\[0-9\]+\(.\[0-9\]+\)+\[a-zA-Z_\]*" $result operf_ocount_version] == 1} {

#        Need to make sure the kernel has perf support as well
        if {[lindex [local_exec op-check-perfevents "" "" 100] 0] == 0} {
            pass $test
        } else {
            verbose "Kernel does not support operf\n"
            set operf_ocount_version 0
        }
    } else {
        verbose "unable to determine version"
        # A common cause for this is when cpu type "timer" is detected.
        # If running the full testsuite (i.e., 'runtest --tool=oprofile'), the
        # oprofile-opcontrol part will have run first.  However, the exit proc
        # does not run until we're completely finished, so opcontrol_exit will
        # not have been called to do the deinit.  Some newer processor models
        # are not supported by opcontrol except in timer mode, so running
        # opcontrol results in /dev/oprofile/cpu_type being set to 'timer' by
        # the oprofile kernel module.  If operf/ocount are run in such a situation,
        # they detect the "timer" mode and exit with a message telling the user
        # to run 'opcontrol --deinit'. If we are the root user, we'll run the deinit
        # here; then we'll try again to get the version.  If we're not running as
        # root, we'll print an error message with hints to the user on what to do.
        set operf_ocount_version 0
        check_user
        if {$user_is_root == 1} {
            if {[lindex [local_exec "opcontrol --deinit" "" "" 100] 0] == 0} {
                verbose "oprofile deinitialized ok"
                set result [ local_exec "$tool -v" "" "" 100 ]
                if {[regexp "\[0-9\]+\(.\[0-9\]+\)+\[a-zA-Z_\]*" $result operf_ocount_version] == 1} {
                    if {[lindex [local_exec op-check-perfevents "" "" 100] 0] == 0} {
                        pass $test
                        set operf_ocount_version 1
                    } else {
                        verbose "Kernel does not support operf/ocount\n"
                    }
                }
            }
        } else {
            send "Unable to get version for $tool. Is oprofile installed and in your PATH?\n"
            send "If so, and the version is pre-1.0, try running 'opcontrol --deinit'.\n"
            exit 1
        }
    }
    if {$operf_ocount_version == 0} {
        warning $test
    }
}

proc operf_get_version {} {
    global operf_ocount_version
    global operf_version

    set test "OProfile operf version check"
    operf_ocount_get_version "operf"
    set operf_version $operf_ocount_version
}

# run a java test.
proc do_java_test {ctrs output_check test_debug_option} {

    global op_java_workload_table
    global op_workload_table
    global path_to_libjvmti
    set kernel 1
    set user 1
    set ctr_opts {}

    if { $output_check == 1 && $test_debug_option == 0 } {
        validate_xml_help
    }

    foreach ctr $ctrs {
#       n - counter number, no longer used but didn't want to change
#       specification format
        set n [lindex $ctr 0]
        set event [lindex $ctr 1]
        set um [lindex $ctr 2]
        if {$output_check == 3} {
            # With callgraph profiling, we only use the cycles-based event for the
            # architecture.  Just set the count value high enough to make sure it's
            # at least 15x the minimum; 1,500,000 should do it.
            set count 1500000
        } else {
            set count [lindex $ctr 3]
        }
        append ctr_opts "${event}:${count}:${um}:${kernel}:${user},"
    }

    foreach entry [array name op_java_workload_table] {
        set workload_src [lindex $op_java_workload_table($entry) 0]
        set compile_options [lindex $op_java_workload_table($entry) 1]
        set workload_exc [compile_workload $workload_src  $compile_options]
        verbose "Workload: $workload_exc\n"
        verbose "Counter options: $ctr_opts\n"
        # Run the workload
        set java_classpath "workloads/java/"
        set cmd "operf java -agentpath:${path_to_libjvmti} -cp ${java_classpath} ${workload_exc}"
        verbose "operf command is: $cmd \n"

        if {$test_debug_option == 1} {
            set dbg_test " (--debug-info)"
        } else {
            set dbg_test ""
        }
        set test "operf test against java: $cmd"
        verbose "\nTest: $test\n"
        if {[lindex [local_exec $cmd "" "" 100] 0] == 0} {
            pass $test
        } else {
            fail $test
        }

        # - verify that the test ran.
        operf_check_samples_exist $ctrs
        # - verify that at least one .jo file exists.
        operf_check_java_object_file_exists
        # - verify that the .jo entry shows up in the output.
        operf_check_java_samples_exist $ctrs

        # Verify the interesting symbols for this test are found in
        # the output.  Only checking the symbols for the first group of
        # events.
        if {$output_check == 1} {
            local_exec "sleep 1" "" "" 10
            verify_output $op_java_workload_table($entry) $workload_exc $ctr_opts $test_debug_option
        }

        operf_delete_samples
    }
}


proc do_single_process_test {ctrs output_check test_debug_option} {
#   The tests are run in single process mode which does not require root
#
#   output_check values:
#     1 - check output for symbols from workload table
#     2 - check if kallsyms should show up in the output and the symbol
#         no-vmlinux is not be found to verify kallsyms was readable
#     3 - test the callgraph ouput
#
#   test_debug_option values:
#     0 - do not test any additional options
#     1 - test --debug-info option

    global op_workload_table
    set kernel 1
    set user 1
    set ctr_opts {}

    if { $output_check == 1 && $test_debug_option == 0 } {
        validate_xml_help
    }

    foreach ctr $ctrs {
#       n - counter number, no longer used but didn't want to change
#       specification format
        set n [lindex $ctr 0]
        set event [lindex $ctr 1]
        set um [lindex $ctr 2]
        if {$output_check == 3} {
            # With callgraph profiling, we only use the cycles-based event for the
            # architecture.  Just set the count value high enough to make sure it's
            # at least 15x the minimum; 1,500,000 should do it.
            set count 1500000
        } else {
            set count [lindex $ctr 3]
        }
        append ctr_opts "${event}:${count}:${um}:${kernel}:${user},"
    }

    foreach entry [array name op_workload_table] {
        set workload_src [lindex $op_workload_table($entry) 0]
        set compile_options [lindex $op_workload_table($entry) 1]
        set workload_exc [compile_workload $workload_src  $compile_options]
        verbose "Workload: $workload_exc\n"
        verbose "Counter options: $ctr_opts\n"

        # Run the workload
        if {$output_check == 3} {
            set cmd "operf --callgraph --lazy-conversion --events  ${ctr_opts} ${workload_exc}"
        } else {
            set cmd "operf --events  ${ctr_opts} ${workload_exc}"
        }
        verbose "operf command is: $cmd \n"

        if {$test_debug_option == 1} {
            set dbg_test " (--debug-info)"
        } else {
            set dbg_test ""
        }
        switch -exact "$output_check" {
            1 {set test "operf check for symbols$dbg_test: $cmd"}
            2 {set test "operf check for kallsyms$dbg_test: $cmd"}
            3 {set test "operf check callgraph output$dbg_test: $cmd"}
        }
        verbose "\nTest: $test\n"
        if {[lindex [local_exec $cmd "" "" 100] 0] == 0} {
            pass $test
        } else {
            fail $test
        }

        operf_check_samples_exist $ctrs

        # Verify the interesting symbols for this test are found in
        # the output.  Only checking the symbols for the first group of
        # events.
        if {$output_check == 1} {
            local_exec "sleep 1" "" "" 10
            verify_output $op_workload_table($entry) $workload_exc $ctr_opts $test_debug_option
        }

        if {$output_check == 2} {
            local_exec "sleep 1" "" "" 10
            verify_kallsyms_output
        }

        if {$output_check == 3} {
            # check callgraph output
            local_exec "sleep 1" "" "" 10
            verify_callgraph_output $op_workload_table($entry) $workload_exc $ctr_opts
        }

        operf_delete_samples
    }
}

proc do_system-wide_test {ctrs symbol_check} {
#   The tests are run in system-wide mode which requires the user to be
#   root.  System-wide mode is being used to make the operf interface
#   testing as functionally equivalent to the opcontrol interface testing
#   as possible.
#
#   The operf --system-wide command is started in system-wide mode in the
#   background.  Operf in system-wide mode runs until it received a kill
#   command.  The test script captures the parent process id printed by
#   operf.  After the workload has run, a script is called to kill the
#   operf data collection processes.

    global op_workload_table
    set kernel 1
    set user 1
    set ctr_opts {}

    foreach ctr $ctrs {
#       n - counter number, no longer used but didn't want to change
#       specification format
        set n [lindex $ctr 0]
        set event [lindex $ctr 1]
        set um [lindex $ctr 2]
        set count [lindex $ctr 3]
        append ctr_opts "${event}:${count}:${um}:${kernel}:${user},"
    }

    foreach entry [array name op_workload_table] {
        set workload_src [lindex $op_workload_table($entry) 0]
        set compile_options [lindex $op_workload_table($entry) 1]
        set workload_exc [compile_workload $workload_src  $compile_options]

        if {$symbol_check == 1} {
            set test "operf systemwide check for symbols: $workload_exc"
        } else {
            set test "operf systemwide: $workload_exc"
        }

        # create the script to run the operf command
        set operf_run_script [exec mktemp "/tmp/operf_run.XXXX"]
        set operf_output_log [exec mktemp "/tmp/operf_output.XXXX"]
        set fileId [open $operf_run_script "w"]
        puts $fileId "#!/bin/bash"
        puts -nonewline $fileId "operf --system-wide --events "
        puts -nonewline $fileId $ctr_opts
        puts -nonewline $fileId " 2>&1  | tee > $operf_output_log"
        close $fileId
        local_exec "chmod 755 $operf_run_script" "" "" 10

        #  Run the script to start operf data collection in the background
        exec $operf_run_script &

        # Now that operf is running in the background, collect the PID from
        # the output file.   This will be used to stop the system wide data
        # collection shortly.
        set create_stop_script [exec mktemp "/tmp/operf_create_stop_script.XXXX"]
        set fileId [open $create_stop_script "w"]
        set operf_stop_script [exec mktemp "/tmp/operf_stop_operf.XXXX"]
        puts $fileId "#!/bin/bash"
        puts $fileId "echo -n  \"kill -s INT  \" > $operf_stop_script "
        # logic that collects the process id to be killed
        puts $fileId "cat $operf_output_log | grep \"kill\" | cut -d\"\'\" -f2 | cut -d\" \" -f3 >> $operf_stop_script "
        close $fileId

        # check that operf started correctly
        if {[lindex [local_exec "grep \"usage\" $operf_output_log " "" "" 100] 0] == 1} {
            pass $test
        } else {
            fail $test
        }

        # Now, call the script to create the operf kill script.
        local_exec "sleep 2" "" "" 10
        local_exec "chmod 755 $create_stop_script" "" "" 10
        exec $create_stop_script

        # Run the workload
        set result [local_exec "$workload_exc" "" "" 60]

        # And finally, call the operf kill script.
        local_exec "chmod 755 $operf_stop_script" "" "" 10
        exec $operf_stop_script

        operf_check_samples_exist $ctrs

        # Verify the interesting symbols for this test are found in
        # the output.  Only checking the symbols for the first group of
        # events.
        if {$symbol_check == 1} {
            local_exec "sleep 2" "" "" 10
            set test_debug_option 0
            verify_output $op_workload_table($entry) $workload_exc $ctr_opts $test_debug_option
        }

        # cleanup the files created
        local_exec "rm -f $operf_run_script" "" "" 10
        local_exec "rm -f $operf_output_log" "" "" 10
        local_exec "rm -f $create_stop_script" "" "" 10
        local_exec "rm -f $operf_stop_script" "" "" 10
        operf_delete_samples
    }
}
