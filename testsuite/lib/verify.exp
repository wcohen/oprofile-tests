set XML_help_done 0
set XML_report_cg_done 0
set XML_report_no_cg_done 0

proc should_run_xml_tests { } {
	global operf_version
	if { $operf_version == 0 } {
		return 0
	} else {
		case $operf_version {
			{ 0.9.9 } {
				return 1
			}
			{ 0.* } {
				return 0
			}
			{ * } {
				return 1
			}
		}
	}
}

proc validate_xml_help { } {
	global XML_help_done
	if { [should_run_xml_tests] == 0  || $XML_help_done == 1 } {
		return
	}
	set binpath [lindex [local_exec "which ophelp" "" "" 10] 1]
	set binpath [lindex [local_exec "readlink -f $binpath" "" "" 10] 1]
	set idx [string last "/bin" $binpath ]
	set op_install_dir [string range $binpath 0 $idx ]
	append schema_file $op_install_dir "/share/doc/oprofile*/ophelp.xsd"
	set schema_file [glob $schema_file]
	set ophelp_result [local_exec "ophelp --xml" "" "" 100 ]
	set out [open "help_out.xml" w]
	puts $out [lindex $ophelp_result 1]
	close $out
	set xmllint_result [local_exec "xmllint --noout --schema $schema_file help_out.xml"  "" "" 10 ]
	if { [regexp "help_out.xml validates" "$xmllint_result" ]} {
		pass "    Verified XML ophelp output is valid"
	} else {
		fail "    XML ophelp output is invalid"
		print [lindex $xmllint_result 1]
	}
	set result [local_exec "rm -rf ./help_out.xml" "" "" 100 ]
	set XML_help_done 1
}

proc validate_xml_report { callgraph } {
	global XML_report_cg_done
	global XML_report_no_cg_done
	if { [should_run_xml_tests] == 0 } {
		return
	}
	if { $XML_report_cg_done == 1 && $XML_report_no_cg_done == 1 } {
		return
	}

	if { $callgraph } {
		set cg_option "--callgraph"
		set XML_report_cg_done 1
	} else {
		set cg_option ""
		set XML_report_no_cg_done 1
	}
	set binpath [lindex [local_exec "which operf" "" "" 10] 1]
	set binpath [lindex [local_exec "readlink -f $binpath" "" "" 10] 1]
	set idx [string last "/bin" $binpath ]
	set op_install_dir [string range $binpath 0 $idx ]
        verbose "Using install_dir location: $op_install_dir \n"
	append schema_file $op_install_dir "/share/doc/oprofile*/opreport.xsd"
	set schema_file [glob $schema_file]
        verbose "Using schema file: $schema_file \n"
        set opreport_cmd "opreport --debug-info --symbols $cg_option --long-filenames --xml -o out.xml"
        verbose "Opreport command: $opreport_cmd \n"
        set opreport_result [local_exec "$opreport_cmd"  "" "" 100 ]
	set xmllint_result [local_exec "xmllint --noout --schema $schema_file out.xml"  "" "" 10 ]
	if { [regexp "out.xml validates" "$xmllint_result" ]} {
		pass "    Verified XML opreport with callgraph option=$cg_option is valid"
	} else {
		fail "    XML opreport output with callgraph option=$cg_option is invalid"
				print [lindex $xmllint_result 1]
	}
	set result [local_exec "rm -rf ./out.xml" "" "" 100 ]
}

proc verify_output { workload_table_entry workload ctr_opts debug_opt_enabled} {

    set workload_spec $workload_table_entry
    set max [llength $workload_spec]

    if { $debug_opt_enabled } {
    # debug option enabled, adds a column to the output for the source
	set base 3
    } else {
	set base 2
    }
    # Note, starting with the second entry in the workload spec is the name
    # of the workload executable file. The remaining entries are symbols
    # which should be found in opreport output.
    for {set index $base} {$index < $max} {incr index} {
        set symbol [lindex $workload_spec $index]
        verbose "Looking for symbol: $symbol \n"
        if { $debug_opt_enabled } {
            set opreport_cmd "opreport --debug-info --symbols --long-filenames"
            verbose "Opreport command: $opreport_cmd \n"
            set result [local_exec "$opreport_cmd" "" "" 100 ]
        } else {
            set opreport_cmd "opreport --symbols --long-filenames"
            verbose "Opreport command: $opreport_cmd \n"
            set result [local_exec "$opreport_cmd" "" "" 100 ]
        }
        if { [regexp $symbol "$result" ]} {
            verbose "Verify the symbols for workload: $workload"
            verbose "  Performance counter events: $ctr_opts"
            pass "    opreport contains symbol: $symbol"
            verbose "\n"
        } else {
            print "Verify the symbols for workload: $workload"
            print "  Performance counter events: $ctr_opts"
            fail "    opreport does not contain symbol: $symbol"
            print "\n"
        }
        if { $debug_opt_enabled } {
            validate_xml_report 0
        }
    }
}

proc verify_kallsyms_output { } {
    # look for the presence of kallsyms and the absence of no-vmlinux to
    # verify /proc/kallsyms could be read.
    set symbol1 "kallsyms"
    set symbol2 "no-vmlinux"

    set opreport_cmd "opreport --symbols --long-filenames"
    verbose "Opreport command: $opreport_cmd \n"
    set result [local_exec "$opreport_cmd" "" "" 100 ]

    if { [regexp $symbol1 "$result" ] == 1 && [regexp $symbol2 "$result" ] == 0 } {
        pass "    Kallsyms was successfully used to get the kernel symbols."
        verbose "\n"
    } else {
        fail  "    Failed to obtain the kernel symbols from kallsyms."
        print "Verify the test is being run as root or that "
        print "/proc/sys/kernel/kptr_restrict is set to 0."
        send "The current value of kptr_restrict is: "
        set kptr_restrict_file /proc/sys/kernel/kptr_restrict
        set file [open $kptr_restrict_file]
        fcopy $file stdout
        close $file
        print "\n"
    }
}

proc verify_callgraph_output { workload_table_entry workload ctr_opts} {

    set workload_spec $workload_table_entry
    set max [llength $workload_spec]

    # Note, starting with the second entry in the workload spec is the name
    # of the workload executable file. The remaining entries are symbols
    # which should be found in opreport output.

    # Verify the output file contains the expected symbols.
    set opreport_cmd "opreport --callgraph"
    verbose "Opreport command: $opreport_cmd \n"
    set result [regsub {\{|\}} [local_exec "$opreport_cmd " "" "" 100 ] " "]

    for {set index 2} {$index < $max} {incr index} {
        set symbol [lindex $workload_spec $index]
        if { [regexp $symbol "$result" ]} {
            verbose "Verify callgraph output contains the expected symbols:\n"
            verbose "  Workload: $workload\n"
            verbose "  Performance counter events: $ctr_opts\n"
            verbose "  Symbol: $symbol\n"
            pass "    opreport contains symbol: $symbol"
            verbose "\n"
        } else {
            print "Verify callgraph output contains the expected symbols:\n"
            print "  Workload: $workload\n"
            print "  Performance counter events: $ctr_opts\n"
            fail "    opreport does not contain symbol: $symbol"
            print "\n"
        }
    }
    validate_xml_report 1

    #  Check if kallsyms is the image name that the symbol name is
    #  is not /proc/kallsyms as this would indicate an error getting
    #  the symbol from kallsyms.  If the image name is no-vmlinux
    #  then the symbol name should be /no-vmlinux as no vmlinux file
    #  was available and the kallsyms file was not available.

    set array_lines [ split  $result "\n" ]
    set err 0
    foreach line $array_lines {
        set i 0
        foreach word $line {
            set cur_word   [ lindex $line $i ]
            set next_word  [ lindex $line [ expr $i + 1 ] ]
            if { ([string compare $cur_word  "kallsyms"]  == 0 ) &&
              ([string compare $next_word "/proc/kallsyms"] == 0 ) } {
                set err 1
            }
            set i [expr $i + 1]
        }
    }
    if { $err } {
        fail " Could not extract symbols from /proc/kallsyms. \n"
    }
}
